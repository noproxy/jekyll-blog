<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>No Proxy's Blog</title>
    <description>Noproxy's blog. Mainly about Gradle and Android.
</description>
    <link>https://noproxy.github.io/</link>
    <atom:link href="https://noproxy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Jul 2019 18:59:44 +0800</pubDate>
    <lastBuildDate>Tue, 09 Jul 2019 18:59:44 +0800</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Annotations Processing in Gradle Multi-Project Build</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;在通常情况下，一个gradle项目往往由多个project组成，也就是multi-project build。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;以一个android项目为例：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example Multi-project Build&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;├ app/
├ build.gradle
├── feature/
├── build.gradle
└ settings.gradle&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;在使用一些注解处理工具时，如dagger2、room等，注解的使用可能存在于任意的project中。但最终注解处理，需要在最顶层的app项目中，一些特定的类必须在app中生成，并且生成时也必须能获取到依赖的project feature中的注解。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;但实际上，JSR 269描述的注解处理并不能处理如此复杂的场景。&lt;code&gt;编译时&lt;/code&gt; 注解处理是运行在&lt;strong&gt;代码编译&lt;/strong&gt;（javac）阶段，而在Gradle的multi-project build中，多个project之前的依赖传递，使用的是已经编译的classes.jar。这在根本上造成了gradle multi-project build与APT的不兼容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;通俗的说，注解处理器可以在feature编译的时候处理feature里的注解，也可以在app编译的时候处理app里面的注解。但是想在app编译的时候处理去feature里面的注解是不可能的。更准确的说，在app的processor里:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;无法通过 &lt;code&gt;RoundEnvironment&lt;/code&gt; 获取任何feature项目中源码的信息&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;实际上，不仅是feature里的注解信息无法获取，任何Maven依赖、jar依赖里的注解信息也是无法处理的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;编译时注解处理的原理决定了只靠JSR 269的API是无法在multi-project build下进行注解处理的。而运行时注解处理不会在编译时做任何事，运行时可见的类都可以处理，所以有些框架（比如retrofit）虽然使用了注解，但是不会受这个问题困扰。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;workaround&quot;&gt;WorkAround&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;虽然JSR 269提供的能力不足以解决问题，但借助与Gradle的依赖传递机制，我们可以通过Gradle Plugin来解决mulit-project build时注解处理的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个最简单的思路就是：
. 在feature编译时，通过AST遍历或者注解处理将所有注解信息记录在一个文件里，比如extra_annotations.json
. 在app编译之前，通过Gradle的依赖传递，收集所有依赖的extra_annotations.json，并传递给processor（通过注解处理参数，即ap option）
. 在app编译时，app的processor除了处理APT提供的注解信息外，还需要处理2中提供的额外信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;值得注意的是，在1中记录注解信息，将是3中能使用的全部信息。例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;tok-nn&quot;&gt;org.example&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;tok-nd&quot;&gt;@Foo&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-s&quot;&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;tok-kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;tok-kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;tok-kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;Baz&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;在步骤1中记录时，只保存了被注解标注的class的CanonicalName(&lt;code&gt;org.example.Bar&lt;/code&gt;)，而没有记录@Foo注解的Value的值。那么在步骤3中，注解处理器就再也拿不到这个信息了。如之前所说，依赖里的编译时信息，都是无法再通过 &lt;code&gt;RoundEnvironment&lt;/code&gt; 获取了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;不过，&lt;code&gt;ProcessingEnvironment&lt;/code&gt; 是编译环境信息（不是&lt;strong&gt;编译时&lt;/strong&gt;），所以按理来说，通过 &lt;code&gt;ProcessingEnvironment.getElementUtils()&lt;/code&gt; 和 &lt;code&gt;ProcessingEnvironment.getTypeUtils&lt;/code&gt; 获取信息是可以的，只要classpath中存在相关信息即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;所以用下面方式查询 &lt;code&gt;org.example.Bar&lt;/code&gt; 的超类是可以的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;尚未确认&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-c1&quot;&gt;// expect to &amp;#39;org.example.Baz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;tok-n&quot;&gt;TypeMirror&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;superClass&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;getElementUtils&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;getTypeElement&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;org.example.Bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;getSuperclass&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;在feature编译时，通过AST遍历或者注解处理将所有注解信息记录在一个文件里，比如extra_annotations.json&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在app编译之前，通过Gradle的依赖传递，收集所有依赖的extra_annotations.json，并传递给processor（通过注解处理参数，即ap option）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在app编译时，app的processor除了处理APT提供的注解信息外，还需要处理2中提供的额外信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;下面详细讲解方案的实现模块。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;recording-annotation-processor&quot;&gt;Recording Annotation Processor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个将所有注解的信息存在一个文件的注解处理器。它需要：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;从AP options读取输出文件要保存的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;@SupportedAnnotationTypes(&quot;*&quot;)&lt;/code&gt; 来处理所有的注解；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将注解信息序列化保存到文件，json、xml、protobuffer等能储存树的格式都可以；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle-plugin-for-producer&quot;&gt;Gradle Plugin for Producer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个apply到所有producer（被依赖的）项目的Gradle插件。在android中，一般是使用了 &lt;code&gt;com.android.library&lt;/code&gt; 或 &lt;code&gt;java-library&lt;/code&gt; 插件的项目。它需要：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;在module中注册recording annotation processor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过AP option向processor传递生成的文件的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册一个Configuration：&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置CanBeConsumed = true, CanBeResolved = false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Artifacts Attributes中，设置ArtifactType=EXTRA_ANNOTATIONS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将processor的产物，注册为这个Configuration的一个PublishArtifact&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;如果要支持variant-aware，上面的步骤需要为每一个variant创建一套单独的。同时，创建的configuration也需要在Artifacts Attributes中，设置variantType为对应的值。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle-plugin-for-consumer&quot;&gt;Gradle Plugin for Consumer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个apply到所有consumer项目的Gradle插件。在android中，一般是使用了 &lt;code&gt;com.android.application&lt;/code&gt; 插件的项目。它需要：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;通过artifactView API从CompileClasspath获取所有ArtifactType=EXTRA_ANNOTATIONS的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将上面的文件（或文件内容） 通过AP Options传递给注解处理器（这里是指的真正的业务注解处理器）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;值得注意的是，resolve compileClasspath是不允许在configure阶段进行的，所以上面的步骤需要在一个Gradle Task中进行。一般通过Extension配置AP options必须在configure阶段进行。这里有两种方案处理：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;在Task中设置AP option的方法&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;在extension中使用lazy value配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不通过extension配置，而是直接修改相关Task（JavaCompile，KaptTask或ProcessAnnotationsTask）的property&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;关于为什么配置AP options需要如此复杂，可以参考 &lt;a href=&quot;2019-07-11-gradle-extension-reactive&quot;&gt;Why Gradle Extension Should be Reactive&lt;/a&gt;。另外此库也提供了适配多种环境的AP Options注册的API。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implmentation&quot;&gt;Implmentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Incubating.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 09 Jul 2019 00:00:00 +0800</pubDate>
        <link>https://noproxy.github.io/2019/07/09/gradle-multi-project-annotations-processing.html</link>
        <guid isPermaLink="true">https://noproxy.github.io/2019/07/09/gradle-multi-project-annotations-processing.html</guid>
        
        <category>gradle</category>
        
        
      </item>
    
      <item>
        <title>如何清理Mac磁盘空间</title>
        <description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;清理的原因&quot;&gt;清理的原因&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;硬盘不够用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电脑运行时会产生大量的垃圾，并且其中很大部分不会被自动删除&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;下面是典型的几种产生不会自动被删除的数据的原因：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;app被卸载了但配置数据和缓存没有被删除&quot;&gt;.1. App被卸载了，但配置、数据和缓存没有被删除&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mac App被直接删除（将 &lt;code&gt;/Applications/XXX.app&lt;/code&gt; 移动到垃圾箱）时，它的配置、应用数据和缓存是不会删除的。
这些数据永久的被留了下来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;直接删除App的残留文件&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;~/Library/Preferences/${App的名字} &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
~/Library/Application Support/${App的名字}
~/Library/Caches/${App的名字}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;App未必总是把数据存在自己的app名字的文件夹内，也可能是包名、公司名&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
使用CleanMyMac卸载App，则会把配置数据缓存一同删除
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;app升级时遗留了旧版的配置数据和缓存&quot;&gt;.2. App升级时遗留了旧版的配置、数据和缓存&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;有些App在大版本（Major Version）升级的时候，为了让老版本和新版本可以共存，用于配置、数据、缓存的目录名会更换。从而导致老的数据被永久遗留，成为&quot;野数据&quot;(类似野指针：不再被使用，也不会有程序会主动删除)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;比如Intellij IDEA的2018.1版本的配置目录是：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;code&gt;~/Library/Preferences/IntellijIDEA2018.1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;升级到2018.2之后则是：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;code&gt;~/Library/Preferences/IntellijIDEA2018.2&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;之前版本的数据就一直被遗留在电脑中。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;不会被删除的缓存&quot;&gt;.3. 不会被删除的缓存&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;很多App，只写了产生缓存的逻辑，并没有写删除缓存的逻辑。抑或者只会删除当前版本的缓存，旧的就不处理了。这一点在日志文件上更为常见，只管新建日志，过期的日志从来不删。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;例如，Gradle会产生大量的缓存（往往可以到数十G），低版本完全没有删除的逻辑，新版本也删除的不全面并且不处理旧版的数据。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jetbrains IDE也有同样的问题，产生的日志从来不删，尤其是出错时的dump文件，体积大并且不删。同时Jetbrains对源码索引生成的缓存的体积也似乎从来不减小，可能也没有删除逻辑。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;app运行数据里的野数据&quot;&gt;.4. App运行数据里的野数据&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;有些App会产生很多信息写入数据库，但未必写了相应的逻辑清理，数据库不会存在缓存里，所以清理缓存也清理不掉。最后表现为，
使用App里的清理缓存工具把一切数据都清理了，仍然占用空间很大。最明显的就是腾讯的微信和QQ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;微信和QQ刚刚安装后仅几百M，但使用时间长之后就变成了几G甚至10来G，它们都自带数据清理功能，但你尽管清缓存，删聊天记录，全删完了也还是占几个G。
这说明它们运行时产生的文件早已变成了野数据，app自身都不记得创建了哪些文件，它更是不可能记得去删除。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;这种情况最好的办法就是导出或者备份聊天记录，然后整个重置App的数据，然后重新登陆，导入聊天记录。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;清理的工具&quot;&gt;清理的工具&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cli工具&quot;&gt;CLI工具&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;在终端中使用如下命令可以列出当前目录下各个文件夹占用的空间：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;du -hd1 &lt;span class=&quot;tok-p&quot;&gt;|&lt;/span&gt; gsort -h&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;du&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;是unix上用于查看磁盘占用情况的工具&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;参数指定输出的数据大小更易读&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;-d1&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;指定只输出一层目录的信息&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;| gsort -h&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;是将前面命令的输出按数据大小排序&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gui&quot;&gt;GUI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CleanMyMac是一个很好用的Mac清理App。有很多功能可以用来代替手工查找和删除垃圾文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;缓存清理&quot;&gt;缓存清理&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CleanMyMac可以找出所有GUI的Mac App的缓存文件，使用它可以解决大部分的缓存。但使用时需要注意：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;不要默认清除所有找到的缓存&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CleanMyMac会默认勾选所有找到的缓存。
但其实不是所有的缓存都过期了，清空有用的缓存会导致以后App加载变慢。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;例如IDE产生的缓存大部分是对源码的索引，如果你平时开发的项目没有很大变更，没有必要去删除IDE的缓存。&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;不要频繁的清空缓存&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;缓存是一个有用的东西，所以尽量少清理：&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;如果你硬盘空间很充足，就完全没有必要清理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你上次清理还没过去多久，也没必要清理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;CleanMyMac清理的并不全面&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;CleanMyMac只支持按标准开发的Mac GUI App和少数常见的cli工具的缓存。使用这个清理之后，如果空间仍然不足，你仍然需要进一步手工清理垃圾文件。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;app卸载&quot;&gt;App卸载&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CleanMyMac删除App会一同删除配置，数据和缓存。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;space-lens&quot;&gt;Space Lens&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;手工清理垃圾的时候，最重要的就是有的放矢：找出空间最主要被消耗的地方。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个200M的文件夹，里面就算全部是垃圾，你找出来清空，最多只能释放200M空间。
但是一个80G的文件夹，里面能释放的空间就多了。所以使用du命令的时候，要按大小排序，去最占空间的文件夹里找，每次都是先清理完最大的位置再继续找次要的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CleanMyMac的Space Lens是这个思路的GUI解决方案。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;清理的目标&quot;&gt;清理的目标&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;选择性的清理缓存&quot;&gt;.1. 选择性的清理缓存&lt;/h3&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
建议首先使用CleanMyMac之类的清理工具：清理App一般都能找出大部分的缓存
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;缓存是有用的，删除缓存会让程序加载都变慢。但如果你能判断缓存有大部分不再需要的时候，就需要清理了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;例如，在使用了很长时间之后，一定有大量的缓存是无用的，所以隔较长的一段时间后，就可以考虑清理缓存了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;在比如，某次工作需要，使用IDE打开了一个非常庞大的开源项目，往往IDE会为这数G的源码建立索引，产生几G的缓存。如果你事后删了这个项目，或短期都不会再需要打开这个项目，你就可以把IDE的缓存清除一遍。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;完全删除不会再使用的过期数据&quot;&gt;.2. 完全删除不会再使用的过期数据&lt;/h3&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
清理App无法识别不再使用的数据
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
建议按占空间分布查找体积大的老数据（借助du或者CleanMyMac的Space Lens功能）
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;不再使用的App，旧版的App的数据，全部可以删除。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;清理或者压缩用途不大的用户数据&quot;&gt;.3. 清理或者压缩用途不大的用户数据&lt;/h3&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
清理App无法识别用途不大的用户数据
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
建议按占空间分布查找体积大的老数据（借助du或者CleanMyMac的Space Lens功能）
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;有很多用户数据占体积并且不再有用，比如一年前下载的Windows安装镜像，很长时间时间没再用的虚拟机。这些都是用户数据，所以任何清理软件都无法帮你清除，
只有你自己才知道这些东西究竟还有没有用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;常见可清除文件&quot;&gt;常见可清除文件&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;可完全删除的文件夹&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;~/.gradle/daemon/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.sbt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.ivy2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.gem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.lldb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.m2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.dartServer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;选择性清除不再需要的版本&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;/Library/Java/JavaVirtualMachines/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.gradle/wrapper/dists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.android/avd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Android/sdk/system-images&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;不再需要的旧版App，或定期重装的App数据&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Containers/com.tencent.xinWeChat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Containers/com.tencent.qq&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Containers/com.docker.docker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Application Support/IntelliJIdeaXXXX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Application Support/AndrodiStudioXXXX&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;清空缓存&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;~/.gradle/caches&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Caches/IntelliJIdeaXXXX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/Library/Caches/AndrodiStudioXXXX&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0800</pubDate>
        <link>https://noproxy.github.io/2019/07/05/tips-mac-disk-clean.html</link>
        <guid isPermaLink="true">https://noproxy.github.io/2019/07/05/tips-mac-disk-clean.html</guid>
        
        <category>tips</category>
        
        
      </item>
    
      <item>
        <title>ClassNotFoundException when Run Checkstyle Task by TestKit</title>
        <description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was writing a test for my init script which adds the checkstyle plugin and config files. The test
code is shown as below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;CheckstyleSpec.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nc&quot;&gt;CheckstyleSpec&lt;/span&gt; &lt;span class=&quot;tok-kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;InitScriptIntegrateSpecification&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;tok-kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;can use against java project&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-nl&quot;&gt;given:&lt;/span&gt;
        &lt;span class=&quot;tok-n&quot;&gt;createAnSimpleJavaProject&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;tok-nl&quot;&gt;when:&lt;/span&gt;
        &lt;span class=&quot;tok-n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;tok-s1&quot;&gt;&amp;#39;checkstyleMain&amp;#39;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-s1&quot;&gt;&amp;#39;--init-script&amp;#39;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;tok-s1&quot;&gt;&amp;#39;/path/to/checkstyle-init.script&amp;#39;&lt;/span&gt;

        &lt;span class=&quot;tok-nl&quot;&gt;then:&lt;/span&gt;
        &lt;span class=&quot;tok-n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;tok-n&quot;&gt;taskRun&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s1&quot;&gt;&amp;#39;checkstyleMain&amp;#39;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; method creates an &lt;code&gt;DefaultGradleRunner&lt;/code&gt; in GradleTestKit and launches a build. And the test is expected to success but it fails. This is the stacktrace.&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Click to see stacktrace&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Task :checkstyleMain FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task &amp;#39;:checkstyleMain&amp;#39;.
&amp;gt; groovy/util/AntBuilder

* Try:
Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Exception is:
org.gradle.api.tasks.TaskExecutionException: Execution failed for task &amp;#39;:checkstyleMain&amp;#39;.
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.accept(ExecuteActionsTaskExecuter.java:151)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.accept(ExecuteActionsTaskExecuter.java:148)
	at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:191)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:141)
	at org.gradle.api.internal.tasks.execution.ResolveBeforeExecutionStateTaskExecuter.execute(ResolveBeforeExecutionStateTaskExecuter.java:75)
	at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:62)
	at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:108)
	at org.gradle.api.internal.tasks.execution.ResolveBeforeExecutionOutputsTaskExecuter.execute(ResolveBeforeExecutionOutputsTaskExecuter.java:67)
	at org.gradle.api.internal.tasks.execution.ResolveAfterPreviousExecutionStateTaskExecuter.execute(ResolveAfterPreviousExecutionStateTaskExecuter.java:46)
	at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:94)
	at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
	at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:95)
	at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
	at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
	at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:73)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:49)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
	at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:49)
	at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:43)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:355)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:343)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:336)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:322)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker$1.execute(DefaultPlanExecutor.java:134)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker$1.execute(DefaultPlanExecutor.java:129)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:202)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:193)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:129)
	at org.gradle.execution.plan.DefaultPlanExecutor.process(DefaultPlanExecutor.java:74)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph.executeWithServices(DefaultTaskExecutionGraph.java:178)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph.execute(DefaultTaskExecutionGraph.java:154)
	at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:41)
	at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:40)
	at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:24)
	at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:46)
	at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:49)
	at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:40)
	at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:33)
	at org.gradle.initialization.DefaultGradleLauncher$ExecuteTasks.run(DefaultGradleLauncher.java:383)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)
	at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
	at org.gradle.initialization.DefaultGradleLauncher.runTasks(DefaultGradleLauncher.java:247)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:159)
	at org.gradle.initialization.DefaultGradleLauncher.executeTasks(DefaultGradleLauncher.java:134)
	at org.gradle.internal.invocation.GradleBuildController$1.execute(GradleBuildController.java:58)
	at org.gradle.internal.invocation.GradleBuildController$1.execute(GradleBuildController.java:55)
	at org.gradle.internal.invocation.GradleBuildController$3.create(GradleBuildController.java:82)
	at org.gradle.internal.invocation.GradleBuildController$3.create(GradleBuildController.java:75)
	at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:183)
	at org.gradle.internal.work.StopShieldingWorkerLeaseService.withLocks(StopShieldingWorkerLeaseService.java:40)
	at org.gradle.internal.invocation.GradleBuildController.doBuild(GradleBuildController.java:75)
	at org.gradle.internal.invocation.GradleBuildController.run(GradleBuildController.java:55)
	at org.gradle.tooling.internal.provider.runner.BuildModelActionRunner.run(BuildModelActionRunner.java:54)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:58)
	at org.gradle.tooling.internal.provider.ValidatingBuildActionRunner.run(ValidatingBuildActionRunner.java:32)
	at org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:39)
	at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$3.call(RunAsBuildOperationBuildActionRunner.java:51)
	at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$3.call(RunAsBuildOperationBuildActionRunner.java:45)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
	at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
	at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner.run(RunAsBuildOperationBuildActionRunner.java:45)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$1.transform(InProcessBuildActionExecuter.java:49)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$1.transform(InProcessBuildActionExecuter.java:46)
	at org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:78)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:46)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:31)
	at org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(BuildTreeScopeBuildActionExecuter.java:42)
	at org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(BuildTreeScopeBuildActionExecuter.java:28)
	at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)
	at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:52)
	at org.gradle.tooling.internal.provider.SubscribableBuildActionExecuter.execute(SubscribableBuildActionExecuter.java:59)
	at org.gradle.tooling.internal.provider.SubscribableBuildActionExecuter.execute(SubscribableBuildActionExecuter.java:36)
	at org.gradle.tooling.internal.provider.SessionScopeBuildActionExecuter.execute(SessionScopeBuildActionExecuter.java:68)
	at org.gradle.tooling.internal.provider.SessionScopeBuildActionExecuter.execute(SessionScopeBuildActionExecuter.java:38)
	at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:37)
	at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:26)
	at org.gradle.tooling.internal.provider.ParallelismConfigurationBuildActionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:43)
	at org.gradle.tooling.internal.provider.ParallelismConfigurationBuildActionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:29)
	at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:60)
	at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)
	at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:55)
	at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:41)
	at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:48)
	at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:32)
	at org.gradle.tooling.internal.provider.DaemonBuildActionExecuter.execute(DaemonBuildActionExecuter.java:50)
	at org.gradle.tooling.internal.provider.DaemonBuildActionExecuter.execute(DaemonBuildActionExecuter.java:35)
	at org.gradle.tooling.internal.provider.LoggingBridgingBuildActionExecuter.execute(LoggingBridgingBuildActionExecuter.java:59)
	at org.gradle.tooling.internal.provider.LoggingBridgingBuildActionExecuter.execute(LoggingBridgingBuildActionExecuter.java:38)
	at org.gradle.tooling.internal.provider.ProviderConnection.run(ProviderConnection.java:195)
	at org.gradle.tooling.internal.provider.ProviderConnection.run(ProviderConnection.java:138)
	at org.gradle.tooling.internal.provider.DefaultConnection.getModel(DefaultConnection.java:193)
	at org.gradle.tooling.internal.consumer.connection.CancellableModelBuilderBackedModelProducer.produceModel(CancellableModelBuilderBackedModelProducer.java:53)
	at org.gradle.tooling.internal.consumer.connection.PluginClasspathInjectionSupportedCheckModelProducer.produceModel(PluginClasspathInjectionSupportedCheckModelProducer.java:38)
	at org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection.run(AbstractConsumerConnection.java:59)
	at org.gradle.tooling.internal.consumer.connection.ParameterValidatingConsumerConnection.run(ParameterValidatingConsumerConnection.java:47)
	at org.gradle.tooling.internal.consumer.DefaultBuildLauncher$1.run(DefaultBuildLauncher.java:88)
	at org.gradle.tooling.internal.consumer.DefaultBuildLauncher$1.run(DefaultBuildLauncher.java:82)
	at org.gradle.tooling.internal.consumer.connection.LazyConsumerActionExecutor.run(LazyConsumerActionExecutor.java:84)
	at org.gradle.tooling.internal.consumer.connection.CancellableConsumerActionExecutor.run(CancellableConsumerActionExecutor.java:45)
	at org.gradle.tooling.internal.consumer.connection.ProgressLoggingConsumerActionExecutor.run(ProgressLoggingConsumerActionExecutor.java:58)
	at org.gradle.tooling.internal.consumer.connection.RethrowingErrorsConsumerActionExecutor.run(RethrowingErrorsConsumerActionExecutor.java:38)
	at org.gradle.tooling.internal.consumer.async.DefaultAsyncConsumerActionExecutor$1$1.run(DefaultAsyncConsumerActionExecutor.java:55)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
Caused by: java.lang.NoClassDefFoundError: groovy/util/AntBuilder
	at org.gradle.internal.classloader.MultiParentClassLoader.loadClass(MultiParentClassLoader.java:77)
	at org.gradle.internal.classloader.CachingClassLoader.loadClass(CachingClassLoader.java:56)
	at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.newInstanceOf(DefaultIsolatedAntBuilder.java:165)
	at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.access$200(DefaultIsolatedAntBuilder.java:48)
	at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$2.execute(DefaultIsolatedAntBuilder.java:138)
	at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$2.execute(DefaultIsolatedAntBuilder.java:134)
	at org.gradle.api.internal.project.antbuilder.ClassPathToClassLoaderCache.withCachedClassLoader(ClassPathToClassLoaderCache.java:134)
	at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.execute(DefaultIsolatedAntBuilder.java:128)
	at org.gradle.api.internal.project.IsolatedAntBuilder$execute$0.call(Unknown Source)
	at org.gradle.api.plugins.quality.internal.CheckstyleInvoker.invoke(CheckstyleInvoker.groovy:51)
	at org.gradle.api.plugins.quality.Checkstyle.run(Checkstyle.java:148)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:103)
	at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:48)
	at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:41)
	at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:28)
	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:702)
	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:669)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$5.run(ExecuteActionsTaskExecuter.java:404)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)
	at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:393)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:376)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$200(ExecuteActionsTaskExecuter.java:80)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:213)
	at org.gradle.internal.execution.steps.ExecuteStep.lambda$execute$1(ExecuteStep.java:33)
	at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:33)
	at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:26)
	at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:58)
	at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:35)
	at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:48)
	at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:33)
	at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:39)
	at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:73)
	at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:54)
	at org.gradle.internal.execution.steps.CatchExceptionStep.execute(CatchExceptionStep.java:35)
	at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:51)
	at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:45)
	at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:31)
	at org.gradle.internal.execution.steps.CacheStep.executeWithoutCache(CacheStep.java:201)
	at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:70)
	at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:45)
	at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:49)
	at org.gradle.internal.execution.steps.StoreSnapshotsStep.execute(StoreSnapshotsStep.java:43)
	at org.gradle.internal.execution.steps.StoreSnapshotsStep.execute(StoreSnapshotsStep.java:32)
	at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:38)
	at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:24)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:96)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:89)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:54)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:38)
	at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:77)
	at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:37)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:36)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:26)
	at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:90)
	at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:48)
	at org.gradle.internal.execution.impl.DefaultWorkExecutor.execute(DefaultWorkExecutor.java:33)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:120)
	... 121 more
Caused by: java.lang.ClassNotFoundException: groovy.util.AntBuilder
	... 187 more&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reason&quot;&gt;Reason&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The boot classpath is quite different if the gradle daemon is launched by Gradle Testkit. The classpath includes the gradle 'testRuntimeClasspath' configuration and compiled test code. The former contains much more jar files from the &lt;code&gt;gradleApi()&lt;/code&gt;
dependency which contains an implmentation of the &lt;code&gt;javax.xml.parsers.SAXParserFactory&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating isolated/filtering classLoader in &lt;code&gt;org.gradle.internal.classloader.DefaultClassLoaderFactory&lt;/code&gt;, gradle
specially treat JAXP implementation:
If the system classloader has resources &lt;code&gt;META-INF/services/javax.xml.parsers.SAXParserFactory&lt;/code&gt;, the enclosing
jar file will be included into the isolated classloader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;org.gradle.internal.classloader.DefaultClassLoaderFactory.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;needJaxpImpl&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-n&quot;&gt;classPath&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;addToClassPath&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;classPath&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;getClasspathForResource&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;getSystemClassLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;tok-s&quot;&gt;&amp;quot;META-INF/services/javax.xml.parsers.SAXParserFactory&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;tok-n&quot;&gt;classPath&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;addToClassPath&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;classPath&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;getClasspathForClass&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;org.w3c.dom.ElementTraversal&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In normal gradle build(aka launched by cli or IDE), there is no such resource in system classloader. But only
if the build was launched by Gradle Testkit, the system classloader would contain file &lt;code&gt;/path/to/cache/&amp;#8230;&amp;#8203;/generated-gradle-jars/gradle-api-5.4.1.jar&lt;/code&gt; and the special code was activated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The isolated or filtering classloader is used to create compiler, jdk tools and ant. The below code show how gradle create a classloader for ant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;antLoader&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;classLoaderFactory&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;createIsolatedClassLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;isolated-ant-loader&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;DefaultClassPath&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;antClasspath&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;));&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span class=&quot;tok-n&quot;&gt;FilteringClassLoader&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;loggingLoader&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;...&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span class=&quot;tok-n&quot;&gt;baseAntLoader&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;CachingClassLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;MultiParentClassLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;antLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;loggingLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;));&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

&lt;span class=&quot;tok-n&quot;&gt;ClassPath&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;gradleCoreUrls&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;...&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&lt;span class=&quot;tok-k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;antAdapterLoader&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;VisitableURLClassLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;gradle-core-loader&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;baseAntLoader&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;gradleCoreUrls&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;);&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;a classloader only permit classes in ant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;a classloader only permit classes about logger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;a classloader only permit classes about ant and logger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;urls for gradle core api and it&amp;#8217;s implementation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;final classloader only can permit classes in ant,logger and gradle core&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the final ant adapter classloader should be able to load classes in gradle core and it also has a parent to load ant and logger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The compositing classloader work like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Simpliped findClass procedure&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;tok-nf&quot;&gt;findclass&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;tok-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;()){&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span class=&quot;tok-k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;tok-kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;);&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;tok-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;tok-kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tok-nf&quot;&gt;ClassNotFoundException&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;();&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;try use parents to findClass&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;if parents fail, find it from urls which includes the whole gradle core&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;fails finally if still not found&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When loading the classes of ant, the &lt;code&gt;org.gradle.api.AntBuilder&lt;/code&gt; is resolving. And it depends on &lt;code&gt;groovy/util/AntBuilder&lt;/code&gt; so if classloader find and try to define the former, it will also try to find and define the later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In normal case, there is no such class named &lt;code&gt;org.gradle.api.AntBuilder&lt;/code&gt; in parents and parents all throw ClassNotFoundException, and finally the class and its dependencies are resolved by the &amp;lt;2&amp;gt;
&lt;code&gt;findClass&lt;/code&gt; at the end. No exception occurs because the final &lt;code&gt;findClass&lt;/code&gt; can resolve everything including gradle-core-api, gradle-core and groovy runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it' coming to our issue, our gradle build is launched by Testkit so the system classpath contains implementation of JAXP(provided by &lt;code&gt;generated-gradle-jars/gradle-api-5.4.1.jar&lt;/code&gt;). As the result, the antLoader(one of the parents) will include an addition jar which contains &lt;code&gt;META-INF/services/javax.xml.parsers.SAXParserFactory&lt;/code&gt;. The problem is the addition &lt;code&gt;generated-gradle-jars/gradle-api-5.4.1.jar&lt;/code&gt; also contains many gradle api without complete implementation.
So the parent find and try to define class &lt;code&gt;org.gradle.api.AntBuilder&lt;/code&gt; but it cannot find all dependencies classes(for example, groovy/util/AntBuilder). The procedure likes this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;load procedure when issue occurs&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;parent find org.gradle.api.AntBuilder &amp;#8594; found&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parent define org.gradle.api.AntBuilder &amp;#8594; &amp;#8230;&amp;#8203; &amp;lt;1&amp;gt;&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;parent find groovy.util.AntBuilder &amp;#8594; notFound &amp;lt;2&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The parent fails in finding class &lt;code&gt;groovy.util.AntBuilder&lt;/code&gt; when defining &lt;code&gt;org.gradle.api.AntBuilder&lt;/code&gt;, so the &amp;lt;2&amp;gt; cause ClassNotFoundException but jvm catch it and then throws ClassNotDefException at &amp;lt;1&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, the thrown exception is &lt;code&gt;ClassNotDefException&lt;/code&gt; and the above code just catches ClassNotFoundException.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, I deleted the &lt;code&gt;META-INF/services/javax.xml.parsers.SAXParserFactory&lt;/code&gt; file in &lt;code&gt;generated-gradle-jars/gradle-api-5.4.1.jar&lt;/code&gt; and everything goes well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;workaround&quot;&gt;WorkAround&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;for-gradle-team&quot;&gt;For Gradle Team&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maybe simply adding an addition catch clause for &lt;code&gt;ClassNotDefException&lt;/code&gt; when calling parent classloader can solve it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;for-testkit-user&quot;&gt;For TestKit User&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m working on finding a solution to make the classpath launched by TestKit as similar as possible to the CLI. Because the test environment should always work the same/similar as the producting environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0800</pubDate>
        <link>https://noproxy.github.io/2019/07/05/gradle-issue-01.html</link>
        <guid isPermaLink="true">https://noproxy.github.io/2019/07/05/gradle-issue-01.html</guid>
        
        <category>gradle</category>
        
        
      </item>
    
      <item>
        <title>如何使用Gradle API获取项目的依赖信息</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;有时我们会想开发一个插件或者gradle script获取当前项目的依赖。在不了解gradle的api的情况下，可能会用解析build.gradle文件的笨办法方式去分析，但其实这种方式很不靠谱。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle本身提供了全面的API获取项目的依赖信息，利用这个API，你可以查询：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;用户在build.gradle里声明的显式依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为传递依赖（transitive dependency）被隐式引入的依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过解析后，最终被采用的依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过解析后，解析失败的依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle的依赖是用Configuration进行管理的，不同的configuration，里面包含的依赖的使用时机就不一样。例如在android项目中，
`debugCompileClasspath`是编译debug版本时使用的依赖。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;查询debugcompileclasspath中的依赖&quot;&gt;查询debugCompileClasspath中的依赖&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;这里以之为例，来介绍如何查询其中的依赖。&lt;/p&gt;
&lt;/div&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/c6bc77cc0f4ff9876eb1b04a491578d7.js&quot;&gt; &lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 01 Jul 2019 00:00:00 +0800</pubDate>
        <link>https://noproxy.github.io/2019/07/01/gradle-discovery-dependencies.html</link>
        <guid isPermaLink="true">https://noproxy.github.io/2019/07/01/gradle-discovery-dependencies.html</guid>
        
        <category>gradle</category>
        
        <category>tips</category>
        
        
      </item>
    
  </channel>
</rss>
